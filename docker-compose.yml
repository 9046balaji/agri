version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: agri_postgres
    environment:
      POSTGRES_DB: agri_db
      POSTGRES_USER: agri_user
      POSTGRES_PASSWORD: agri_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"  # Expose to host for development
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Optional: initialization script
    networks:
      - agri_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agri_user -d agri_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: agri_redis
    ports:
      - "6379:6379"  # Expose to host for development
    volumes:
      - redis_data:/data
    networks:
      - agri_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend Service
  backend:
    build: .
    container_name: agri_backend
    ports:
      - "8005:8005"  # Expose backend to host
    environment:
      - ENV=development
    env_file:
      - .env
    volumes:
      - .:/app  # Mount source code for development
      - ./artifacts:/app/artifacts  # Mount artifacts directory
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agri_network
    command: uvicorn app:app --host 0.0.0.0 --port 8005 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (Optional - for serving static files)
  frontend:
    image: nginx:alpine
    container_name: agri_frontend
    ports:
      - "8080:80"  # Serve frontend on port 8080
    volumes:
      - ./src:/usr/share/nginx/html  # Mount frontend files
      - ./nginx.conf:/etc/nginx/nginx.conf  # Custom nginx config
    depends_on:
      - backend
    networks:
      - agri_network

volumes:
  postgres_data:
  redis_data:

networks:
  agri_network:
    driver: bridge